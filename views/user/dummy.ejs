
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        .order-status {
            font-size: 1.2rem;
            font-weight: bold;
        }
        .product-image {
            max-width: 100px;
            height: auto;
        }
        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        .table th {
            background-color: #f8f9fa;
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <div class="row mb-4">
            <div class="col-md-6">
                <h1>Order Details</h1>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-primary invcBtn" onclick="InvoiceDownload()">Invoice</button>
            </div>
        </div>    
        <div class="card mb-4">
            <div class="card-header">
                <h2 class="card-title h5 mb-0">Order Summary</h2>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Order Number:</strong> <%=order._id%></p>
                        <p><strong>Order Date:</strong> <%=new Date(order.createdAt).toLocaleString()%></p>
                        <p><strong>Customer Name:</strong> <%=user.name%></p>
                        <p class="order-status">Order Status: <span class="badge bg-<%= order.orderStatus === 'Cancelled' ? 'danger' : 'success' %> orderStatus"><%=order.orderStatus%></span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Total Amount:</strong> ₹ <%=order.total.toFixed(2)%></p>
                        <p><strong>Payment Method:</strong> <%=order.paymentMethod%></p>
                        <p class="order-status"><strong>Payment Status:</strong>
                            <span class="badge bg-danger"><%=order.paymentStatus%></span>
                        </p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                    <%if(order.orderStatus !== "Cancelled" && order.orderStatus !== "Deliverd" && order.orderStatus !== "Returned" && order.paymentStatus !== "Failed"){%>    
                        <button type="button" id="cancelOrderButton" class="btn btn-danger">
                            Cancel Order
                        </button>
                    <%}else if(order.orderStatus === "Deliverd"){%>    
                        <button id="returnOrderButton" type="button" class="btn btn-warning">
                            Return Order
                        </button>
                    <%}else{%>
                        <p class="text-muted">No action possible</p>
                    <%}%>    
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h2 class="card-title h5 mb-0">Product Details</h2>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Name</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% order.items.forEach(item => { %>
                                <tr>
                                    <td>
                                        <img src="/uploads/re-image/<%=item.productId.productImage[0]%>"
                                            alt="<%=item.productId.productName%>" class="product-image">
                                    </td>
                                    <td><%=item.productId.productName%></td>
                                    <td>₹ <%=item.price.toFixed(2)%></td>
                                    <td><%=item.quantity%></td>
                                    <td>₹ <%=(item.price * item.quantity).toFixed(2)%></td>
                                </tr>
                            <%})%>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h2 class="card-title h5 mb-0">Shipping Information</h2>
                    </div>
                    <div class="card-body">
                        <p><strong>Name:</strong> <%=order.address.name%></p>
                        <p><strong>Address:</strong> <%=order.address.landMark%></p>
                        <p><strong>City:</strong> <%=order.address.city%></p>
                        <p><strong>State:</strong> <%=order.address.state%></p>
                        <p><strong>Zip Code:</strong> <%=order.address.pincode%></p>
                        <p><strong>Country:</strong> India</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h2 class="card-title h5 mb-0">Payment Details</h2>
                    </div>
                    <div class="card-body">
                        <p><strong>Payment Method:</strong> <%=order.paymentMethod%></p>
                        <p><strong>Subtotal:</strong> ₹ <%=order.subTotal.toFixed(2)%></p>
                        <p><strong>Shipping:</strong> ₹ <%=order.deliveryCharge.toFixed(2)%></p>
                        <p><strong>Tax:</strong> ₹ 0.00</p>
                        <hr>
                        <p><strong>Total:</strong> ₹ <%=order.total.toFixed(2)%></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.js"></script>

    <!-- Invoice download libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <script>

        // cancel order function
        document.getElementById("cancelOrderButton")?.addEventListener("click", function () {
            Swal.fire({
                icon: "warning",
                title: "Are you sure?",
                text: "Please Provide a Reason for this order Cancellation.",
                input:"text",
                inputPlaceholder:"Enter Your Reason",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Cancel Order",
                inputValidator:(value)=>{
                    if(!value){
                        return "You need to Provide A reason before cancelling."
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const cancelReason =result.value
                    cancelOrder(cancelReason);
                }
            });
        });

        function cancelOrder(cancelReason) {
            const url = "/orderCancel/<%=order._id%>";

            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body:JSON.stringify({cancelReason})
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: data.message,
                        text: `Order <%=order._id%> has been cancelled.`,
                        confirmButtonText: 'OK'
                    })
                    .then(() => {
                        const orderStatusElement = document.querySelector(".orderStatus");
                        if (orderStatusElement) {
                            orderStatusElement.textContent = "Cancelled";
                            orderStatusElement.classList.remove("bg-success");
                            orderStatusElement.classList.add("bg-danger");
                        }
                        const cancelOrderButton = document.querySelector("#cancelOrderButton");
                        if (cancelOrderButton) {
                            cancelOrderButton.disabled = true;
                        }
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: data.message,
                        confirmButtonText: "OK"
                    });
                }
            }).catch(error => {
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while cancelling the order.',
                    icon: 'error',
                    confirmButtonText: 'Try Again'
                });
            });
        }


        // Return Order function
        document.getElementById("returnOrderButton")?.addEventListener("click", function() {
            Swal.fire({
                title: "Return Order",
                text: "Are You Sure.? Please provide a Reason for Returning this Order..!",
                input:"text",
                inputPlaceholder:"Enter Your Reason",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, proceed",
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                inputValidator:(value)=>{
                    if(!value){
                        return "You Must need to provide a Reason for Return this order..!"
                    }
                }
            })
            .then((result) => {
                if (result.isConfirmed) {
                    returnOrder();
                }
            });
        });

        function returnOrder() {
            fetch("/ReturnOrder/<%= order._id%>", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire("Return Request Success", "Order return has been successful. Our executive will collect the product.", "success");

                    const orderStatusPlace = document.querySelector(".orderStatus");
                    if (orderStatusPlace) {
                        orderStatusPlace.textContent = "Returned";
                        orderStatusPlace.classList.remove("bg-success");
                        orderStatusPlace.classList.add("bg-warning");
                    }

                    const returnOrderButton = document.querySelector("#returnOrderButton");
                    if (returnOrderButton) {
                        returnOrderButton.disabled = true;
                    }
                } else {
                    Swal.fire({
                        title: "Error!",
                        text: data.message,
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            })
            .catch(error => {
                Swal.fire("Error!", "An error occurred in order cancellation!", "error");
            });
        }


        // Invoice Download function

        async function InvoiceDownload() {
        // Select the portion
        const invoiceElement = document.querySelector('.container');

        //element to change
        const title = document.querySelector('h1')

        //store original title to restore after making pdf
        const originalTitle = title.textContent;

        //title to change 
        title.textContent = "Order Invoice"

        // Hide unecessary elemnts
        const elementsToHide = document.querySelectorAll('.btn-primary, #cancelOrderButton, #returnOrderButton');
        elementsToHide.forEach(el => el.style.display = 'none');

        // Use html2canvas to capture the element 
        const canvas = await html2canvas(invoiceElement);

        // Convert canvas to image
        const imgData = canvas.toDataURL('image/png');

        // Create PDF using jsPDF
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF('p', 'mm', 'a4');

        // Add image to PDF
        pdf.addImage(imgData, 'PNG', 10, 10, 190, 280);

        // Show the hidden elements again
        elementsToHide.forEach(el => el.style.display = '');

        //restore title
        title.textContent = originalTitle

        // Download the PDF
        pdf.save('Invoice.pdf');
    }
    
    </script>

    /////////////


    <div class="rating-result" title="90%">
        <% if (products[i].salePrice < products[i].regularPrice) { %>
            <span class="save-price font-md color3 ml-15">
                <% const discount=Math.round(((products[i].regularPrice -
                    products[i].salePrice) / products[i].regularPrice) * 100);
                    %>
                    <%= discount %> % Off
            </span>
        <% } %>
    </div>
